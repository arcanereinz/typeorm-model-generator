{{#*inline "Index"}}
@Index("{{name}}",[{{#columns}}"{{toPropertyName .}}",{{/columns~}}],{ {{json options}} })
{{/inline}}
{{#*inline "Import"}}
import {{localImport (toEntityName entityName)}} from './{{toFileName fileName}}'
{{/inline}}
{{#*inline "Column"}}
{{#generated}}@PrimaryGeneratedColumn({ type:"{{type}}", {{/generated}}{{^generated}}@Column("{{type}}",{ {{#primary}}primary:{{primary}},{{/primary}}{{/generated}}{{json options}}{{#transformer}},transformer: {{.}}{{/transformer}}{{#default}},default: {{.}},{{/default}} })
{{#each constraints}}{{this}}{{/each}}
{{printPropertyVisibility}}{{toPropertyName tscName}} {{#if @root.smartStrictMode}}{{chainingSymbol}}{{else}}{{strictMode}}{{/if}} :{{tscType}}{{#if options.nullable}} | null{{/if}};

{{/inline}}
{{#*inline "JoinColumnOptions"}}
{ name: "{{name}}", referencedColumnName: "{{toPropertyName referencedColumnName}}" },
{{/inline}}
{{#*inline "Relation"}}
@{{relationType}}(()=>{{toEntityName relatedTable}},{{toPropertyName relatedTable}}=>{{toPropertyName relatedTable}}.{{toPropertyName relatedField}}{{#if relationOptions}},{ {{json relationOptions}} }{{/if}})
{{#if joinColumnOptions}}@JoinColumn([{{#joinColumnOptions}}{{> JoinColumnOptions}}{{/joinColumnOptions}}]){{/if}}
{{#joinTableOptions}}@JoinTable({ name:"{{name}}", joinColumns:[{{#joinColumns}}{{> JoinColumnOptions}}{{/joinColumns}}],inverseJoinColumns:[{{#inverseJoinColumns}}{{> JoinColumnOptions}}{{/inverseJoinColumns}}],{{#database}}database:"{{.}}",{{/database}}{{#schema}}schema:"{{.}}"{{/schema}} }){{/joinTableOptions}}
{{printPropertyVisibility}}{{toPropertyName fieldName}}{{#if @root.smartStrictMode}}?{{else}}{{strictMode}}{{/if}}:{{toRelation (toEntityName relatedTable) relationType}};

{{/inline}}
{{#*inline "RelationId"}}
@RelationId(({{toPropertyName entityName}}:{{toEntityName entityName}})=>{{toPropertyName entityName}}.{{toPropertyName relationField}})
{{printPropertyVisibility}}{{toPropertyName fieldName}}{{strictMode}}:{{fieldType}};

{{/inline}}
{{#*inline "Constructor"}}
{{printPropertyVisibility}}constructor(init?: Partial<{{toEntityName entityName}}>) {
    {{#activeRecord}}super();
    {{/activeRecord}}Object.assign(this, init);
}
{{/inline}}
{{#*inline "Entity"}}
{{#indices}}{{> Index}}{{/indices~}}
@Entity("{{sqlName}}"{{#schema}} ,{schema:"{{.}}"{{#if ../database}}, database:"{{../database}}"{{/if}} } {{/schema}})
export {{defaultExport}} class {{toEntityName tscName}}{{#activeRecord}} extends BaseEntity{{/activeRecord}} {

{{#columns}}{{> Column}}{{/columns~}}
{{#relations}}{{> Relation}}{{/relations~}}
{{#relationIds}}{{> RelationId entityName=../tscName}}{{/relationIds~}}
{{#if generateConstructor}}{{>Constructor entityName=tscName}}{{/if~}}
}
{{/inline}}
 /**
 * Class representation of `{{schema}}.{{sqlName}}` generated by modified version of typeorm-model-generator.
 * 
 * @description Created with the following options (list not exhaustive - only pertains to entity options):
 * {{#if cascade}} --cascade '{{cascade}}',{{/if~}}
{{#if activeRecord}} --active-record,{{/if~}}
{{#if generateConstructor}} --generateConstructor,{{/if~}}
{{#if generateTinyintTransformer}} --generateTinyintTransformer,{{/if~}}
{{#if generateBigintTransformer}} --generateBigintTransformer,{{/if~}}
{{#if generateValidators}} --generateValidators,{{/if~}}
{{#if smartStrictMode}} --smartStrictMode,{{/if~}}
{{#if noTypeorm}} --noTypeorm,{{/if}}
 */
import {BaseEntity,Column,Entity,Index,JoinColumn,JoinTable,ManyToMany,ManyToOne,OneToMany,OneToOne,PrimaryColumn,PrimaryGeneratedColumn,RelationId} from "typeorm";
{{#if generateValidators}}import { {{#each classValidators}}{{@key}},{{/each}} } from 'class-validator';{{/if~}}
{{#fileImports}}{{> Import}}{{/fileImports}}

{{> Entity}}
